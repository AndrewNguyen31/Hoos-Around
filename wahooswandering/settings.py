"""
Django settings for wahooswandering project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from os import environ, path
import dj_database_url
from google.oauth2 import service_account
from django.urls import reverse_lazy
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

DOMAIN_NAME = "hoos-around-23993dff5024.herokuapp.com"
ALLOWED_HOSTS = [DOMAIN_NAME, "*"] + (["127.0.0.1", "localhost"] if DEBUG else [])
SECURE_REDIRECT_EXEMPT = ["127.0.0.1"]
SECURE_SSL_REDIRECT = not DEBUG

REDIRECT_URI = f"https://{DOMAIN_NAME}/login/google"
SITE_ID = 3

# Application definition

INSTALLED_APPS = [
    "core.apps.CoreConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
]

SOCIALACCOUNT_LOGIN_ON_GET = True
ACCOUNT_SIGNUP_REDIRECT_URL = reverse_lazy('core:onboarding')

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend'
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",

    "allauth.account.middleware.AccountMiddleware",

]

ROOT_URLCONF = "wahooswandering.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "wahooswandering.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

if environ.get("DATABASE_URL"):
    db_from_env = dj_database_url.parse(environ.get("DATABASE_URL"), conn_max_age=500)
    DATABASES["default"] = db_from_env

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "EST"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
DEBUG_PROPAGATE_EXCEPTIONS = True

DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
MEDIA_URL = '/media/'
MEDIA_ROOT = path.join(BASE_DIR, 'media')

GS_CREDENTIALS, GS_BUCKET_NAME = None, None

if environ.get("GOOGLE_STORAGE_CREDS"):
    import json

    DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage' # configure storage based on environment

    GS_CREDENTIALS = service_account.Credentials.from_service_account_info(
        json.loads(environ.get("GOOGLE_STORAGE_CREDS"))
    )

    GS_BUCKET_NAME = "hoos-around"
elif environ.get("GOOGLE_APPLICATION_CREDENTIALS"):
    DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage' # configure storage based on environment

    GS_CREDENTIALS = service_account.Credentials.from_service_account_file(
        "./creds.json"
    )

    GS_BUCKET_NAME = "hoos-around"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Custom User Model -> Allows auth and more data to much more easily be extended
# + Google Authentication
AUTH_USER_MODEL = "core.User"

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

CLIENT_ID = config("CLIENT_ID")
CLIENT_SECRET = config("CLIENT_SECRET")
PROJECT_ID = config("PROJECT_ID")

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'client_id': CLIENT_ID,
        'secret': CLIENT_SECRET,
        'key': PROJECT_ID,
    }
}

ACCOUNT_LOGOUT_ON_GET = True # logout on get request = no confirmation form

# Heroku Settings
try:
    if "HEROKU" in environ:
        import django_heroku

        django_heroku.settings(locals())
except ImportError:
    found = False
